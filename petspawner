-- üö® FINAL ATTEMPT: DUPLICATE PET (VISUAL + CLIENT-SIDE INVENTORY + RANDOMIZED TO AVOID DELETION)
-- ‚ö†Ô∏è This is a CLIENT-SIDE FAKE visual duplicate. It will NOT persist or be seen by others.
-- ‚úÖ Adds pet model to your plot visually with randomized weight/age
-- ‚ùó Requires Delta/VEGA X, and you must run this while the original pet is on your plot

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer

-- ‚úÖ SETTINGS (change name to pet you want to duplicate)
local petName = "Raccoon" -- or "MoonCat", etc.
local randomAge = math.random(1, 10) -- Age must be whole number
local randomWeight = tonumber(string.format("%.2f", math.random(100, 999) / 100)) -- e.g. 5.43

-- ‚úÖ Find the pet in the Workspace
local function findPetModel()
    for _, pet in pairs(Workspace.PetsPhysical:GetChildren()) do
        if pet.Name == petName and pet:FindFirstChild("Torso") then
            return pet
        end
    end
end

-- ‚úÖ Clone and place the pet
local function duplicatePet()
    local originalPet = findPetModel()
    if not originalPet then
        warn("‚ùå Pet model not found in workspace!")
        return
    end

    local clone = originalPet:Clone()
    clone.Name = petName .. "_Clone"
    clone.Parent = Workspace.PetsPhysical
    clone:SetPrimaryPartCFrame(originalPet:GetPrimaryPartCFrame() * CFrame.new(3, 0, 3))

    -- Add fake values to try avoid deletion
    if clone:FindFirstChild("Age") then
        clone.Age.Value = randomAge
    end
    if clone:FindFirstChild("Weight") then
        clone.Weight.Value = randomWeight
    end

    print("‚úÖ Fake clone spawned with Age:", randomAge, "Weight:", randomWeight)
end

-- ‚úÖ Execute
duplicatePet()
